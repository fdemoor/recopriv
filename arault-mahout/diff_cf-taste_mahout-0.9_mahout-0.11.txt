diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/common/Refreshable.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/common/Refreshable.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/common/Refreshable.java	2015-08-14 10:37:10.362076077 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/common/Refreshable.java	2015-08-14 10:25:54.650539079 +0200
@@ -44,7 +44,7 @@
    * 
    * @param alreadyRefreshed
    *          {@link org.apache.mahout.cf.taste.common.Refreshable}s that are known to have already been
-   *          refreshed as a result of an initial call to a {@link #refresh(Collection)} method on some
+   *          refreshed as a result of an initial call to a {#refresh(Collection)} method on some
    *          object. This ensure that objects in a refresh dependency graph aren't refreshed twice
    *          needlessly.
    */
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ALS.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ALS.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ALS.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ALS.java	2015-08-14 10:25:54.650539079 +0200
@@ -17,9 +17,12 @@
 
 package org.apache.mahout.cf.taste.hadoop.als;
 
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
 import com.google.common.base.Preconditions;
-import com.google.common.collect.Lists;
-import com.google.common.io.Closeables;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.LocalFileSystem;
@@ -35,19 +38,14 @@
 import org.apache.mahout.math.Vector;
 import org.apache.mahout.math.VectorWritable;
 import org.apache.mahout.math.als.AlternatingLeastSquaresSolver;
-import org.apache.mahout.math.function.Functions;
 import org.apache.mahout.math.map.OpenIntObjectHashMap;
 
-import java.io.IOException;
-import java.util.Iterator;
-import java.util.List;
-
 final class ALS {
 
   private ALS() {}
 
   static Vector readFirstRow(Path dir, Configuration conf) throws IOException {
-    Iterator<VectorWritable> iterator = new SequenceFileDirValueIterator<VectorWritable>(dir, PathType.LIST,
+    Iterator<VectorWritable> iterator = new SequenceFileDirValueIterator<>(dir, PathType.LIST,
         PathFilters.partFilter(), null, true, conf);
     return iterator.hasNext() ? iterator.next().get() : null;
   }
@@ -66,15 +64,10 @@
     LocalFileSystem localFs = FileSystem.getLocal(conf);
 
     for (Path cachedFile : cachedFiles) {
-
-      SequenceFile.Reader reader = null;
-      try {
-        reader = new SequenceFile.Reader(localFs, cachedFile, conf);
+      try (SequenceFile.Reader reader = new SequenceFile.Reader(localFs, cachedFile, conf)){
         while (reader.next(rowIndex, row)) {
           featureMatrix.put(rowIndex.get(), row.get());
         }
-      } finally {
-        Closeables.close(reader, true);
       }
     }
 
@@ -83,7 +76,7 @@
   }
 
   public static OpenIntObjectHashMap<Vector> readMatrixByRows(Path dir, Configuration conf) {
-    OpenIntObjectHashMap<Vector> matrix = new OpenIntObjectHashMap<Vector>();
+    OpenIntObjectHashMap<Vector> matrix = new OpenIntObjectHashMap<>();
     for (Pair<IntWritable,VectorWritable> pair
         : new SequenceFileDirIterable<IntWritable,VectorWritable>(dir, PathType.LIST, PathFilters.partFilter(), conf)) {
       int rowIndex = pair.getFirst().get();
@@ -97,7 +90,7 @@
     double lambda, int numFeatures) {
     Vector ratings = ratingsWritable.get();
 
-    List<Vector> featureVectors = Lists.newArrayListWithCapacity(ratings.getNumNondefaultElements());
+    List<Vector> featureVectors = new ArrayList<>(ratings.getNumNondefaultElements());
     for (Vector.Element e : ratings.nonZeroes()) {
       int index = e.index();
       featureVectors.add(uOrM.get(index));
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/FactorizationEvaluator.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/als/FactorizationEvaluator.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/FactorizationEvaluator.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/als/FactorizationEvaluator.java	2015-08-14 10:25:54.650539079 +0200
@@ -23,8 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
-import com.google.common.base.Charsets;
-import com.google.common.io.Closeables;
+import org.apache.commons.io.Charsets;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FSDataOutputStream;
 import org.apache.hadoop.fs.FileSystem;
@@ -104,17 +103,12 @@
       return -1;
     }
 
-    BufferedWriter writer  = null;
-    try {
-      FileSystem fs = FileSystem.get(getOutputPath().toUri(), getConf());
-      FSDataOutputStream outputStream = fs.create(getOutputPath("rmse.txt"));
+    FileSystem fs = FileSystem.get(getOutputPath().toUri(), getConf());
+    FSDataOutputStream outputStream = fs.create(getOutputPath("rmse.txt"));
+    try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outputStream, Charsets.UTF_8))){
       double rmse = computeRmse(errors);
-      writer = new BufferedWriter(new OutputStreamWriter(outputStream, Charsets.UTF_8));
       writer.write(String.valueOf(rmse));
-    } finally {
-      Closeables.close(writer, false);
     }
-
     return 0;
   }
 
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob.java	2015-08-14 10:25:54.650539079 +0200
@@ -23,7 +23,6 @@
 import java.util.Random;
 
 import com.google.common.base.Preconditions;
-import com.google.common.io.Closeables;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.filecache.DistributedCache;
 import org.apache.hadoop.fs.FileStatus;
@@ -102,10 +101,6 @@
   private double lambda;
   private double alpha;
   private int numThreadsPerSolver;
-  private boolean usesLongIDs;
-
-  private int numItems;
-  private int numUsers;
 
   enum Stats { NUM_USERS }
 
@@ -138,7 +133,7 @@
     implicitFeedback = Boolean.parseBoolean(getOption("implicitFeedback"));
 
     numThreadsPerSolver = Integer.parseInt(getOption("numThreadsPerSolver"));
-    usesLongIDs = Boolean.parseBoolean(getOption("usesLongIDs", String.valueOf(false)));
+    boolean usesLongIDs = Boolean.parseBoolean(getOption("usesLongIDs", String.valueOf(false)));
 
     /*
     * compute the factorization A = U M'
@@ -196,8 +191,8 @@
 
     Vector averageRatings = ALS.readFirstRow(getTempPath("averageRatings"), getConf());
 
-    numItems = averageRatings.getNumNondefaultElements();
-    numUsers = (int) userRatings.getCounters().findCounter(Stats.NUM_USERS).getValue();
+    int numItems = averageRatings.getNumNondefaultElements();
+    int numUsers = (int) userRatings.getCounters().findCounter(Stats.NUM_USERS).getValue();
 
     log.info("Found {} users and {} items", numUsers, numItems);
 
@@ -208,11 +203,11 @@
       /* broadcast M, read A row-wise, recompute U row-wise */
       log.info("Recomputing U (iteration {}/{})", currentIteration, numIterations);
       runSolver(pathToUserRatings(), pathToU(currentIteration), pathToM(currentIteration - 1), currentIteration, "U",
-                numItems);
+          numItems);
       /* broadcast U, read A' row-wise, recompute M row-wise */
       log.info("Recomputing M (iteration {}/{})", currentIteration, numIterations);
       runSolver(pathToItemRatings(), pathToM(currentIteration), pathToU(currentIteration), currentIteration, "M",
-                numUsers);
+          numUsers);
     }
 
     return 0;
@@ -222,11 +217,9 @@
     Random random = RandomUtils.getRandom();
 
     FileSystem fs = FileSystem.get(pathToM(-1).toUri(), getConf());
-    SequenceFile.Writer writer = null;
-    try {
-      writer = new SequenceFile.Writer(fs, getConf(), new Path(pathToM(-1), "part-m-00000"), IntWritable.class,
-          VectorWritable.class);
-
+    try (SequenceFile.Writer writer =
+             new SequenceFile.Writer(fs, getConf(), new Path(pathToM(-1), "part-m-00000"),
+                 IntWritable.class, VectorWritable.class)) {
       IntWritable index = new IntWritable();
       VectorWritable featureVector = new VectorWritable();
 
@@ -240,8 +233,6 @@
         featureVector.set(row);
         writer.append(index, featureVector);
       }
-    } finally {
-      Closeables.close(writer, false);
     }
   }
 
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/PredictionMapper.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/als/PredictionMapper.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/PredictionMapper.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/als/PredictionMapper.java	2015-08-14 10:25:54.650539079 +0200
@@ -63,7 +63,7 @@
     OpenIntObjectHashMap<Vector> U = ALS.readMatrixByRows(pathToU, conf);
     OpenIntObjectHashMap<Vector> M = ALS.readMatrixByRows(pathToM, conf);
 
-    return new Pair<OpenIntObjectHashMap<Vector>, OpenIntObjectHashMap<Vector>>(U, M);
+    return new Pair<>(U, M);
   }
 
   @Override
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/SolveImplicitFeedbackMapper.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/als/SolveImplicitFeedbackMapper.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/SolveImplicitFeedbackMapper.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/als/SolveImplicitFeedbackMapper.java	2015-08-14 10:25:54.650539079 +0200
@@ -44,7 +44,7 @@
     Preconditions.checkArgument(numFeatures > 0, "numFeatures must be greater then 0!");
 
     return new ImplicitFeedbackAlternatingLeastSquaresSolver(numFeatures, lambda, alpha,
-        ALS.readMatrixByRowsFromDistributedCache(numEntities, conf));
+        ALS.readMatrixByRowsFromDistributedCache(numEntities, conf), 1);
   }
 
   @Override
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/AggregateAndRecommendReducer.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item/AggregateAndRecommendReducer.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/AggregateAndRecommendReducer.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item/AggregateAndRecommendReducer.java	2015-08-14 10:25:54.650539079 +0200
@@ -18,7 +18,6 @@
 package org.apache.mahout.cf.taste.hadoop.item;
 
 import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.mapreduce.Reducer;
 import org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem;
 import org.apache.mahout.cf.taste.hadoop.RecommendedItemsWritable;
@@ -26,8 +25,6 @@
 import org.apache.mahout.cf.taste.hadoop.TopItemsQueue;
 import org.apache.mahout.cf.taste.impl.common.FastIDSet;
 import org.apache.mahout.cf.taste.recommender.RecommendedItem;
-import org.apache.mahout.common.HadoopUtil;
-import org.apache.mahout.common.iterator.FileLineIterable;
 import org.apache.mahout.math.RandomAccessSparseVector;
 import org.apache.mahout.math.VarLongWritable;
 import org.apache.mahout.math.Vector;
@@ -66,6 +63,7 @@
 
   private boolean booleanData;
   private int recommendationsPerUser;
+  private IDReader idReader;
   private FastIDSet itemsToRecommendFor;
   private OpenIntLongHashMap indexItemIDMap;
 
@@ -80,17 +78,9 @@
     booleanData = conf.getBoolean(RecommenderJob.BOOLEAN_DATA, false);
     indexItemIDMap = TasteHadoopUtils.readIDIndexMap(conf.get(ITEMID_INDEX_PATH), conf);
 
-    String itemFilePathString = conf.get(ITEMS_FILE);
-    if (itemFilePathString != null) {
-      itemsToRecommendFor = new FastIDSet();
-      for (String line : new FileLineIterable(HadoopUtil.openStream(new Path(itemFilePathString), conf))) {
-        try {
-          itemsToRecommendFor.add(Long.parseLong(line));
-        } catch (NumberFormatException nfe) {
-          log.warn("itemsFile line ignored: {}", line);
-        }
-      }
-    }
+    idReader = new IDReader(conf);
+    idReader.readIDs();
+    itemsToRecommendFor = idReader.getItemIds();
   }
 
   @Override
@@ -119,8 +109,8 @@
   }
 
   private void reduceNonBooleanData(VarLongWritable userID,
-                        Iterable<PrefAndSimilarityColumnWritable> values,
-                        Context context) throws IOException, InterruptedException {
+                                    Iterable<PrefAndSimilarityColumnWritable> values,
+                                    Context context) throws IOException, InterruptedException {
     /* each entry here is the sum in the numerator of the prediction formula */
     Vector numerators = null;
     /* each entry here is the sum in the denominator of the prediction formula */
@@ -179,18 +169,24 @@
    */
   private void writeRecommendedItems(VarLongWritable userID, Vector recommendationVector, Context context)
     throws IOException, InterruptedException {
-
     TopItemsQueue topKItems = new TopItemsQueue(recommendationsPerUser);
+    FastIDSet itemsForUser = null;
+
+    if (idReader != null && idReader.isUserItemFilterSpecified()) {
+      itemsForUser = idReader.getItemsToRecommendForUser(userID.get());
+    }
 
     for (Element element : recommendationVector.nonZeroes()) {
       int index = element.index();
       long itemID;
       if (indexItemIDMap != null && !indexItemIDMap.isEmpty()) {
         itemID = indexItemIDMap.get(index);
-      } else { //we don't have any mappings, so just use the original
+      } else { // we don't have any mappings, so just use the original
         itemID = index;
       }
-      if (itemsToRecommendFor == null || itemsToRecommendFor.contains(itemID)) {
+
+      if (shouldIncludeItemIntoRecommendations(itemID, itemsToRecommendFor, itemsForUser)) {
+
         float value = (float) element.get();
         if (!Float.isNaN(value)) {
 
@@ -210,4 +206,15 @@
     }
   }
 
+  private boolean shouldIncludeItemIntoRecommendations(long itemID, FastIDSet allItemsToRecommendFor,
+                                                       FastIDSet itemsForUser) {
+    if (allItemsToRecommendFor == null && itemsForUser == null) {
+      return true;
+    } else if (itemsForUser != null) {
+      return itemsForUser.contains(itemID);
+    } else {
+      return allItemsToRecommendFor.contains(itemID);
+    }
+  }
+
 }
Only in mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item: IDReader.java
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ItemFilterAsVectorAndPrefsReducer.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ItemFilterAsVectorAndPrefsReducer.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ItemFilterAsVectorAndPrefsReducer.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ItemFilterAsVectorAndPrefsReducer.java	2015-08-14 10:25:54.650539079 +0200
@@ -17,7 +17,10 @@
 
 package org.apache.mahout.cf.taste.hadoop.item;
 
-import com.google.common.collect.Lists;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
 import org.apache.hadoop.mapreduce.Reducer;
 import org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils;
 import org.apache.mahout.math.RandomAccessSparseVector;
@@ -25,9 +28,6 @@
 import org.apache.mahout.math.VarLongWritable;
 import org.apache.mahout.math.Vector;
 
-import java.io.IOException;
-import java.util.List;
-
 /**
  * we use a neat little trick to explicitly filter items for some users: we inject a NaN summand into the preference
  * estimation for those items, which makes {@link org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer}
@@ -48,8 +48,8 @@
     /* artificial NaN summand to exclude this item from the recommendations for all users specified in userIDs */
     vector.set(itemIDIndex, Double.NaN);
 
-    List<Long> userIDs = Lists.newArrayList();
-    List<Float> prefValues = Lists.newArrayList();
+    List<Long> userIDs = new ArrayList<>();
+    List<Float> prefValues = new ArrayList<>();
     for (VarLongWritable userID : values) {
       userIDs.add(userID.get());
       prefValues.add(1.0f);
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java	2015-08-14 10:25:54.650539079 +0200
@@ -110,6 +110,9 @@
     addOption("itemsFile", null, "File of items to recommend for", null);
     addOption("filterFile", "f", "File containing comma-separated userID,itemID pairs. Used to exclude the item from "
             + "the recommendations for that user (optional)", null);
+    addOption("userItemFile", "uif", "File containing comma-separated userID,itemID pairs (optional). "
+            + "Used to include only these items into recommendations. "
+            + "Cannot be used together with usersFile or itemsFile", null);
     addOption("booleanData", "b", "Treat input as without pref values", Boolean.FALSE.toString());
     addOption("maxPrefsPerUser", "mxp",
             "Maximum number of preferences considered per user in final recommendation phase",
@@ -139,6 +142,7 @@
     String usersFile = getOption("usersFile");
     String itemsFile = getOption("itemsFile");
     String filterFile = getOption("filterFile");
+    String userItemFile = getOption("userItemFile");
     boolean booleanData = Boolean.valueOf(getOption("booleanData"));
     int maxPrefsPerUser = Integer.parseInt(getOption("maxPrefsPerUser"));
     int minPrefsPerUser = Integer.parseInt(getOption("minPrefsPerUser"));
@@ -235,6 +239,11 @@
       if (usersFile != null) {
         partialMultiplyConf.set(UserVectorSplitterMapper.USERS_FILE, usersFile);
       }
+      
+      if (userItemFile != null) {
+        partialMultiplyConf.set(IDReader.USER_ITEM_FILE, userItemFile);
+      }
+      
       partialMultiplyConf.setInt(UserVectorSplitterMapper.MAX_PREFS_PER_USER_CONSIDERED, maxPrefsPerUser);
 
       boolean succeeded = partialMultiply.waitForCompletion(true);
@@ -275,6 +284,10 @@
       if (itemsFile != null) {
         aggregateAndRecommendConf.set(AggregateAndRecommendReducer.ITEMS_FILE, itemsFile);
       }
+      
+      if (userItemFile != null) {
+        aggregateAndRecommendConf.set(IDReader.USER_ITEM_FILE, userItemFile);
+      }
 
       if (filterFile != null) {
         setS3SafeCombinedInputPath(aggregateAndRecommend, getTempPath(), partialMultiplyPath, explicitFilterPath);
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ToVectorAndPrefReducer.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ToVectorAndPrefReducer.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ToVectorAndPrefReducer.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ToVectorAndPrefReducer.java	2015-08-14 10:25:54.650539079 +0200
@@ -18,9 +18,9 @@
 package org.apache.mahout.cf.taste.hadoop.item;
 
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.List;
 
-import com.google.common.collect.Lists;
 import org.apache.hadoop.mapreduce.Reducer;
 import org.apache.mahout.math.VarIntWritable;
 import org.apache.mahout.math.Vector;
@@ -35,8 +35,8 @@
                         Iterable<VectorOrPrefWritable> values,
                         Context context) throws IOException, InterruptedException {
 
-    List<Long> userIDs = Lists.newArrayList();
-    List<Float> prefValues = Lists.newArrayList();
+    List<Long> userIDs = new ArrayList<>();
+    List<Float> prefValues = new ArrayList<>();
     Vector similarityMatrixColumn = null;
     for (VectorOrPrefWritable value : values) {
       if (value.getVector() == null) {
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/UserVectorSplitterMapper.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item/UserVectorSplitterMapper.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/UserVectorSplitterMapper.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item/UserVectorSplitterMapper.java	2015-08-14 10:25:54.650539079 +0200
@@ -17,15 +17,10 @@
 
 package org.apache.mahout.cf.taste.hadoop.item;
 
-import com.google.common.io.Closeables;
 import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.fs.FSDataInputStream;
-import org.apache.hadoop.fs.FileSystem;
-import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.mapreduce.Mapper;
 import org.apache.lucene.util.PriorityQueue;
 import org.apache.mahout.cf.taste.impl.common.FastIDSet;
-import org.apache.mahout.common.iterator.FileLineIterable;
 import org.apache.mahout.math.VarIntWritable;
 import org.apache.mahout.math.VarLongWritable;
 import org.apache.mahout.math.Vector;
@@ -56,26 +51,10 @@
   protected void setup(Context context) throws IOException {
     Configuration jobConf = context.getConfiguration();
     maxPrefsPerUserConsidered = jobConf.getInt(MAX_PREFS_PER_USER_CONSIDERED, DEFAULT_MAX_PREFS_PER_USER_CONSIDERED);
-    String usersFilePathString = jobConf.get(USERS_FILE);
-    if (usersFilePathString != null) {
-      FSDataInputStream in = null;
-      try {
-        Path unqualifiedUsersFilePath = new Path(usersFilePathString);
-        FileSystem fs = FileSystem.get(unqualifiedUsersFilePath.toUri(), jobConf);
-        usersToRecommendFor = new FastIDSet();
-        Path usersFilePath = unqualifiedUsersFilePath.makeQualified(fs);
-        in = fs.open(usersFilePath);
-        for (String line : new FileLineIterable(in)) {
-          try {
-            usersToRecommendFor.add(Long.parseLong(line));
-          } catch (NumberFormatException nfe) {
-            log.warn("usersFile line ignored: {}", line);
-          }
-        }
-      } finally {
-        Closeables.close(in, true);
-      }
-    }
+    
+    IDReader idReader = new IDReader (jobConf);
+    idReader.readIDs();
+    usersToRecommendFor = idReader.getUserIds();    
   }
 
   @Override
@@ -83,6 +62,9 @@
                      VectorWritable value,
                      Context context) throws IOException, InterruptedException {
     long userID = key.get();
+
+    log.info("UserID = {}", userID);
+
     if (usersToRecommendFor != null && !usersToRecommendFor.contains(userID)) {
       return;
     }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/VectorAndPrefsWritable.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item/VectorAndPrefsWritable.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/VectorAndPrefsWritable.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/item/VectorAndPrefsWritable.java	2015-08-14 10:25:54.650539079 +0200
@@ -20,9 +20,9 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.List;
 
-import com.google.common.collect.Lists;
 import org.apache.hadoop.io.Writable;
 import org.apache.mahout.math.Varint;
 import org.apache.mahout.math.Vector;
@@ -77,8 +77,8 @@
     writable.readFields(in);
     vector = writable.get();
     int size = Varint.readUnsignedVarInt(in);
-    userIDs = Lists.newArrayListWithCapacity(size);
-    values = Lists.newArrayListWithCapacity(size);
+    userIDs = new ArrayList<>(size);
+    values = new ArrayList<>(size);
     for (int i = 0; i < size; i++) {
       userIDs.add(Varint.readSignedVarLong(in));
       values.add(in.readFloat());
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/RecommendedItemsWritable.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/RecommendedItemsWritable.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/RecommendedItemsWritable.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/RecommendedItemsWritable.java	2015-08-14 10:25:54.650539079 +0200
@@ -20,9 +20,9 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.List;
 
-import com.google.common.collect.Lists;
 import org.apache.hadoop.io.Writable;
 import org.apache.mahout.cf.taste.impl.recommender.GenericRecommendedItem;
 import org.apache.mahout.cf.taste.recommender.RecommendedItem;
@@ -65,7 +65,7 @@
   @Override
   public void readFields(DataInput in) throws IOException {
     int size = in.readInt();
-    recommended = Lists.newArrayListWithCapacity(size);
+    recommended = new ArrayList<>(size);
     for (int i = 0; i < size; i++) {
       long itemID = Varint.readSignedVarLong(in);
       float value = in.readFloat();
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/similarity/item/TopSimilarItemsQueue.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/similarity/item/TopSimilarItemsQueue.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/similarity/item/TopSimilarItemsQueue.java	2015-08-14 10:37:10.368742867 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/similarity/item/TopSimilarItemsQueue.java	2015-08-14 10:25:54.653872470 +0200
@@ -17,13 +17,13 @@
 
 package org.apache.mahout.cf.taste.hadoop.similarity.item;
 
-import com.google.common.collect.Lists;
-import org.apache.lucene.util.PriorityQueue;
-import org.apache.mahout.cf.taste.similarity.precompute.SimilarItem;
-
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+import org.apache.lucene.util.PriorityQueue;
+import org.apache.mahout.cf.taste.similarity.precompute.SimilarItem;
+
 public class TopSimilarItemsQueue extends PriorityQueue<SimilarItem> {
 
   private static final long SENTINEL_ID = Long.MIN_VALUE;
@@ -36,7 +36,7 @@
   }
 
   public List<SimilarItem> getTopItems() {
-    List<SimilarItem> items = Lists.newArrayListWithCapacity(maxSize);
+    List<SimilarItem> items = new ArrayList<>(maxSize);
     while (size() > 0) {
       SimilarItem topItem = pop();
       // filter out "sentinel" objects necessary for maintaining an efficient priority queue
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/TopItemsQueue.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/TopItemsQueue.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/hadoop/TopItemsQueue.java	2015-08-14 10:37:10.365409472 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/hadoop/TopItemsQueue.java	2015-08-14 10:25:54.650539079 +0200
@@ -17,13 +17,13 @@
 
 package org.apache.mahout.cf.taste.hadoop;
 
-import com.google.common.collect.Lists;
-import org.apache.lucene.util.PriorityQueue;
-import org.apache.mahout.cf.taste.recommender.RecommendedItem;
-
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+import org.apache.lucene.util.PriorityQueue;
+import org.apache.mahout.cf.taste.recommender.RecommendedItem;
+
 public class TopItemsQueue extends PriorityQueue<MutableRecommendedItem> {
 
   private static final long SENTINEL_ID = Long.MIN_VALUE;
@@ -36,7 +36,7 @@
   }
 
   public List<RecommendedItem> getTopItems() {
-    List<RecommendedItem> recommendedItems = Lists.newArrayListWithCapacity(maxSize);
+    List<RecommendedItem> recommendedItems = new ArrayList<>(maxSize);
     while (size() > 0) {
       MutableRecommendedItem topItem = pop();
       // filter out "sentinel" objects necessary for maintaining an efficient priority queue
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java	2015-08-14 10:37:10.368742867 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java	2015-08-14 10:25:54.653872470 +0200
@@ -17,13 +17,13 @@
 
 package org.apache.mahout.cf.taste.impl.common;
 
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashSet;
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.locks.ReentrantLock;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import org.apache.mahout.cf.taste.common.Refreshable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -47,7 +47,7 @@
    *          encapsulates the containing object's own refresh logic
    */
   public RefreshHelper(Callable<?> refreshRunnable) {
-    this.dependencies = Lists.newArrayListWithCapacity(3);
+    this.dependencies = new ArrayList<>(3);
     this.refreshLock = new ReentrantLock();
     this.refreshRunnable = refreshRunnable;
   }
@@ -99,7 +99,7 @@
    *         param.
    */
   public static Collection<Refreshable> buildRefreshed(Collection<Refreshable> currentAlreadyRefreshed) {
-    return currentAlreadyRefreshed == null ? Sets.<Refreshable>newHashSetWithExpectedSize(3) : currentAlreadyRefreshed;
+    return currentAlreadyRefreshed == null ? new HashSet<Refreshable>(3) : currentAlreadyRefreshed;
   }
   
   /**
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/AbstractDifferenceRecommenderEvaluator.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/eval/AbstractDifferenceRecommenderEvaluator.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/AbstractDifferenceRecommenderEvaluator.java	2015-08-14 10:37:10.368742867 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/eval/AbstractDifferenceRecommenderEvaluator.java	2015-08-14 10:25:54.653872470 +0200
@@ -17,6 +17,7 @@
 
 package org.apache.mahout.cf.taste.impl.eval;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
@@ -29,7 +30,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import com.google.common.collect.Lists;
+import com.google.common.base.Preconditions;
 import org.apache.mahout.cf.taste.common.NoSuchItemException;
 import org.apache.mahout.cf.taste.common.NoSuchUserException;
 import org.apache.mahout.cf.taste.common.TasteException;
@@ -51,8 +52,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.base.Preconditions;
-
 /**
  * Abstract superclass of a couple implementations, providing shared functionality.
  */
@@ -106,9 +105,9 @@
     log.info("Beginning evaluation using {} of {}", trainingPercentage, dataModel);
     
     int numUsers = dataModel.getNumUsers();
-    FastByIDMap<PreferenceArray> trainingPrefs = new FastByIDMap<PreferenceArray>(
+    FastByIDMap<PreferenceArray> trainingPrefs = new FastByIDMap<>(
         1 + (int) (evaluationPercentage * numUsers));
-    FastByIDMap<PreferenceArray> testPrefs = new FastByIDMap<PreferenceArray>(
+    FastByIDMap<PreferenceArray> testPrefs = new FastByIDMap<>(
         1 + (int) (evaluationPercentage * numUsers));
     
     LongPrimitiveIterator it = dataModel.getUserIDs();
@@ -142,12 +141,12 @@
       Preference newPref = new GenericPreference(userID, prefs.getItemID(i), prefs.getValue(i));
       if (random.nextDouble() < trainingPercentage) {
         if (oneUserTrainingPrefs == null) {
-          oneUserTrainingPrefs = Lists.newArrayListWithCapacity(3);
+          oneUserTrainingPrefs = new ArrayList<>(3);
         }
         oneUserTrainingPrefs.add(newPref);
       } else {
         if (oneUserTestPrefs == null) {
-          oneUserTestPrefs = Lists.newArrayListWithCapacity(3);
+          oneUserTestPrefs = new ArrayList<>(3);
         }
         oneUserTestPrefs.add(newPref);
       }
@@ -173,7 +172,7 @@
   private double getEvaluation(FastByIDMap<PreferenceArray> testPrefs, Recommender recommender)
     throws TasteException {
     reset();
-    Collection<Callable<Void>> estimateCallables = Lists.newArrayList();
+    Collection<Callable<Void>> estimateCallables = new ArrayList<>();
     AtomicInteger noEstimateCounter = new AtomicInteger();
     for (Map.Entry<Long,PreferenceArray> entry : testPrefs.entrySet()) {
       estimateCallables.add(
@@ -217,7 +216,7 @@
   private static Collection<Callable<Void>> wrapWithStatsCallables(Iterable<Callable<Void>> callables,
                                                                    AtomicInteger noEstimateCounter,
                                                                    RunningAverageAndStdDev timing) {
-    Collection<Callable<Void>> wrapped = Lists.newArrayList();
+    Collection<Callable<Void>> wrapped = new ArrayList<>();
     int count = 0;
     for (Callable<Void> callable : callables) {
       boolean logStats = count++ % 1000 == 0; // log every 1000 or so iterations
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java	2015-08-14 10:37:10.368742867 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java	2015-08-14 10:25:54.653872470 +0200
@@ -127,7 +127,7 @@
         continue;
       }
 
-      FastByIDMap<PreferenceArray> trainingUsers = new FastByIDMap<PreferenceArray>(dataModel.getNumUsers());
+      FastByIDMap<PreferenceArray> trainingUsers = new FastByIDMap<>(dataModel.getNumUsers());
       LongPrimitiveIterator it2 = dataModel.getUserIDs();
       while (it2.hasNext()) {
         dataSplitter.processOtherUser(userID, relevantItemIDs, trainingUsers, it2.nextLong(), dataModel);
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRelevantItemsDataSplitter.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRelevantItemsDataSplitter.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRelevantItemsDataSplitter.java	2015-08-14 10:37:10.368742867 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRelevantItemsDataSplitter.java	2015-08-14 10:25:54.653872470 +0200
@@ -17,7 +17,6 @@
 
 package org.apache.mahout.cf.taste.impl.eval;
 
-import com.google.common.collect.Lists;
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.eval.RelevantItemsDataSplitter;
 import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
@@ -27,6 +26,7 @@
 import org.apache.mahout.cf.taste.model.Preference;
 import org.apache.mahout.cf.taste.model.PreferenceArray;
 
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 
@@ -62,7 +62,7 @@
     // If we're dealing with the very user that we're evaluating for precision/recall,
     if (userID == otherUserID) {
       // then must remove all the test IDs, the "relevant" item IDs
-      List<Preference> prefs2 = Lists.newArrayListWithCapacity(prefs2Array.length());
+      List<Preference> prefs2 = new ArrayList<>(prefs2Array.length());
       for (Preference pref : prefs2Array) {
         prefs2.add(pref);
       }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/LoadEvaluator.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/eval/LoadEvaluator.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/LoadEvaluator.java	2015-08-14 10:37:10.368742867 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/eval/LoadEvaluator.java	2015-08-14 10:25:54.653872470 +0200
@@ -17,11 +17,11 @@
 
 package org.apache.mahout.cf.taste.impl.eval;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.concurrent.Callable;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import com.google.common.collect.Lists;
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;
 import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
@@ -48,7 +48,7 @@
     LongPrimitiveIterator userSampler =
         SamplingLongPrimitiveIterator.maybeWrapIterator(dataModel.getUserIDs(), sampleRate);
     recommender.recommend(userSampler.next(), howMany); // Warm up
-    Collection<Callable<Void>> callables = Lists.newArrayList();
+    Collection<Callable<Void>> callables = new ArrayList<>();
     while (userSampler.hasNext()) {
       callables.add(new LoadCallable(recommender, userSampler.next()));
     }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/AbstractIDMigrator.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/AbstractIDMigrator.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/AbstractIDMigrator.java	2015-08-14 10:37:10.372076263 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/AbstractIDMigrator.java	2015-08-14 10:25:54.653872470 +0200
@@ -19,10 +19,9 @@
 
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
-
 import java.util.Collection;
 
-import com.google.common.base.Charsets;
+import org.apache.commons.io.Charsets;
 import org.apache.mahout.cf.taste.common.Refreshable;
 import org.apache.mahout.cf.taste.model.IDMigrator;
 
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java	2015-08-14 10:37:10.372076263 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java	2015-08-14 10:25:54.653872470 +0200
@@ -21,6 +21,7 @@
 import java.io.FileFilter;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -28,6 +29,9 @@
 import java.util.TreeMap;
 import java.util.concurrent.locks.ReentrantLock;
 
+import com.google.common.base.Preconditions;
+import com.google.common.base.Splitter;
+import com.google.common.io.Closeables;
 import org.apache.mahout.cf.taste.common.Refreshable;
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
@@ -45,11 +49,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.base.Preconditions;
-import com.google.common.base.Splitter;
-import com.google.common.collect.Lists;
-import com.google.common.io.Closeables;
-
 /**
  * <p>
  * A {@link DataModel} backed by a delimited file. This class expects a file where each line
@@ -128,7 +127,6 @@
   private final File dataFile;
   private long lastModified;
   private long lastUpdateFileModified;
-  private final char delimiter;
   private final Splitter delimiterPattern;
   private final boolean hasPrefValues;
   private DataModel delegate;
@@ -197,6 +195,7 @@
     }
     Closeables.close(iterator, true);
 
+    char delimiter;
     if (delimiterRegex == null) {
       delimiter = determineDelimiter(firstLine);
       delimiterPattern = Splitter.on(delimiter);
@@ -207,7 +206,7 @@
         throw new IllegalArgumentException("Did not find a delimiter(pattern) in first line");
       }
     }
-    List<String> firstLineSplit = Lists.newArrayList();
+    List<String> firstLineSplit = new ArrayList<>();
     for (String token : delimiterPattern.split(firstLine)) {
       firstLineSplit.add(token);
     }
@@ -248,13 +247,13 @@
     lastModified = newLastModified;
     lastUpdateFileModified = newLastUpdateFileModified;
 
-    FastByIDMap<FastByIDMap<Long>> timestamps = new FastByIDMap<FastByIDMap<Long>>();
+    FastByIDMap<FastByIDMap<Long>> timestamps = new FastByIDMap<>();
 
     if (hasPrefValues) {
 
       if (loadFreshData) {
 
-        FastByIDMap<Collection<Preference>> data = new FastByIDMap<Collection<Preference>>();
+        FastByIDMap<Collection<Preference>> data = new FastByIDMap<>();
         FileLineIterator iterator = new FileLineIterator(dataFile, false);
         processFile(iterator, data, timestamps, false);
 
@@ -280,7 +279,7 @@
 
       if (loadFreshData) {
 
-        FastByIDMap<FastIDSet> data = new FastByIDMap<FastIDSet>();
+        FastByIDMap<FastIDSet> data = new FastByIDMap<>();
         FileLineIterator iterator = new FileLineIterator(dataFile, false);
         processFileWithoutID(iterator, data, timestamps);
 
@@ -316,7 +315,7 @@
     int period = dataFileName.indexOf('.');
     String startName = period < 0 ? dataFileName : dataFileName.substring(0, period);
     File parentDir = dataFile.getParentFile();
-    Map<Long, File> modTimeToUpdateFile = new TreeMap<Long,File>();
+    Map<Long, File> modTimeToUpdateFile = new TreeMap<>();
     FileFilter onlyFiles = new FileFilter() {
       @Override
       public boolean accept(File file) {
@@ -526,7 +525,7 @@
 
         if (!exists) {
           if (prefs == null) {
-            prefs = Lists.newArrayListWithCapacity(2);
+            prefs = new ArrayList<>(2);
             ((FastByIDMap<Collection<Preference>>) data).put(userID, prefs);
           }
           prefs.add(new GenericPreference(userID, itemID, preferenceValue));
@@ -612,7 +611,7 @@
     if (timestampString != null) {
       FastByIDMap<Long> itemTimestamps = timestamps.get(userID);
       if (itemTimestamps == null) {
-        itemTimestamps = new FastByIDMap<Long>();
+        itemTimestamps = new FastByIDMap<>();
         timestamps.put(userID, itemTimestamps);
       }
       long timestamp = readTimestampFromString(timestampString);
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileIDMigrator.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileIDMigrator.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileIDMigrator.java	2015-08-14 10:37:10.372076263 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileIDMigrator.java	2015-08-14 10:25:54.653872470 +0200
@@ -61,7 +61,7 @@
   }
 
   public FileIDMigrator(File dataFile, long minReloadIntervalMS) throws FileNotFoundException {
-    longToString = new FastByIDMap<String>(100);
+    longToString = new FastByIDMap<>(100);
     this.dataFile = Preconditions.checkNotNull(dataFile);
     if (!dataFile.exists() || dataFile.isDirectory()) {
       throw new FileNotFoundException(dataFile.toString());
@@ -94,7 +94,7 @@
   }
 
   private FastByIDMap<String> buildMapping() throws IOException {
-    FastByIDMap<String> mapping = new FastByIDMap<String>();
+    FastByIDMap<String> mapping = new FastByIDMap<>();
     for (String line : new FileLineIterable(dataFile)) {
       mapping.put(toLongID(line), line);
     }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericBooleanPrefDataModel.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericBooleanPrefDataModel.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericBooleanPrefDataModel.java	2015-08-14 10:37:10.372076263 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericBooleanPrefDataModel.java	2015-08-14 10:25:54.653872470 +0200
@@ -74,7 +74,7 @@
     Preconditions.checkArgument(userData != null, "userData is null");
 
     this.preferenceFromUsers = userData;
-    this.preferenceForItems = new FastByIDMap<FastIDSet>();
+    this.preferenceForItems = new FastByIDMap<>();
     FastIDSet itemIDSet = new FastIDSet();
     for (Map.Entry<Long, FastIDSet> entry : preferenceFromUsers.entrySet()) {
       long userID = entry.getKey();
@@ -132,7 +132,7 @@
    *  that user's associated items
    */
   public static FastByIDMap<FastIDSet> toDataMap(DataModel dataModel) throws TasteException {
-    FastByIDMap<FastIDSet> data = new FastByIDMap<FastIDSet>(dataModel.getNumUsers());
+    FastByIDMap<FastIDSet> data = new FastByIDMap<>(dataModel.getNumUsers());
     LongPrimitiveIterator it = dataModel.getUserIDs();
     while (it.hasNext()) {
       long userID = it.nextLong();
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericDataModel.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericDataModel.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericDataModel.java	2015-08-14 10:37:10.372076263 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericDataModel.java	2015-08-14 10:25:54.653872470 +0200
@@ -81,7 +81,7 @@
     Preconditions.checkArgument(userData != null, "userData is null");
 
     this.preferenceFromUsers = userData;
-    FastByIDMap<Collection<Preference>> prefsForItems = new FastByIDMap<Collection<Preference>>();
+    FastByIDMap<Collection<Preference>> prefsForItems = new FastByIDMap<>();
     FastIDSet itemIDSet = new FastIDSet();
     int currentCount = 0;
     float maxPrefValue = Float.NEGATIVE_INFINITY;
@@ -174,7 +174,7 @@
    *  that user's preferences
    */
   public static FastByIDMap<PreferenceArray> toDataMap(DataModel dataModel) throws TasteException {
-    FastByIDMap<PreferenceArray> data = new FastByIDMap<PreferenceArray>(dataModel.getNumUsers());
+    FastByIDMap<PreferenceArray> data = new FastByIDMap<>(dataModel.getNumUsers());
     LongPrimitiveIterator it = dataModel.getUserIDs();
     while (it.hasNext()) {
       long userID = it.nextLong();
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/MemoryIDMigrator.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/MemoryIDMigrator.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/MemoryIDMigrator.java	2015-08-14 10:37:10.372076263 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/MemoryIDMigrator.java	2015-08-14 10:25:54.653872470 +0200
@@ -28,7 +28,7 @@
   private final FastByIDMap<String> longToString;
   
   public MemoryIDMigrator() {
-    this.longToString = new FastByIDMap<String>(100);
+    this.longToString = new FastByIDMap<>(100);
   }
   
   @Override
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/PlusAnonymousConcurrentUserDataModel.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/PlusAnonymousConcurrentUserDataModel.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/model/PlusAnonymousConcurrentUserDataModel.java	2015-08-14 10:37:10.372076263 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/model/PlusAnonymousConcurrentUserDataModel.java	2015-08-14 10:25:54.653872470 +0200
@@ -102,8 +102,8 @@
   public PlusAnonymousConcurrentUserDataModel(DataModel delegate, int maxConcurrentUsers) {
     super(delegate);
 
-    tempPrefs = new ConcurrentHashMap<Long, PreferenceArray>();
-    prefItemIDs = new ConcurrentHashMap<Long, FastIDSet>();
+    tempPrefs = new ConcurrentHashMap<>();
+    prefItemIDs = new ConcurrentHashMap<>();
 
     initializeUsersPools(maxConcurrentUsers);
   }
@@ -114,7 +114,7 @@
    * @param usersPoolSize Maximum allowed number of concurrent anonymous user. Depends on the consumer system.
    */
   private void initializeUsersPools(int usersPoolSize) {
-    usersPool = new ConcurrentLinkedQueue<Long>();
+    usersPool = new ConcurrentLinkedQueue<>();
     for (int i = 0; i < usersPoolSize; i++) {
       usersPool.add(TEMP_USER_ID + i);
     }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/neighborhood/CachingUserNeighborhood.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/neighborhood/CachingUserNeighborhood.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/neighborhood/CachingUserNeighborhood.java	2015-08-14 10:37:10.372076263 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/neighborhood/CachingUserNeighborhood.java	2015-08-14 10:25:54.653872470 +0200
@@ -39,7 +39,7 @@
     Preconditions.checkArgument(neighborhood != null, "neighborhood is null");
     this.neighborhood = neighborhood;
     int maxCacheSize = dataModel.getNumUsers(); // just a dumb heuristic for sizing
-    this.neighborhoodCache = new Cache<Long,long[]>(new NeighborhoodRetriever(neighborhood), maxCacheSize);
+    this.neighborhoodCache = new Cache<>(new NeighborhoodRetriever(neighborhood), maxCacheSize);
   }
   
   @Override
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AbstractCandidateItemsStrategy.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AbstractCandidateItemsStrategy.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AbstractCandidateItemsStrategy.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AbstractCandidateItemsStrategy.java	2015-08-14 10:25:54.653872470 +0200
@@ -33,20 +33,25 @@
 public abstract class AbstractCandidateItemsStrategy implements CandidateItemsStrategy,
     MostSimilarItemsCandidateItemsStrategy {
 
-  @Override
-  public FastIDSet getCandidateItems(long userID, PreferenceArray preferencesFromUser, DataModel dataModel)
-    throws TasteException {
-    return doGetCandidateItems(preferencesFromUser.getIDs(), dataModel);
+  protected FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException{
+      return doGetCandidateItems(preferredItemIDs, dataModel, false);
   }
-
+  
   @Override
-  public FastIDSet getCandidateItems(long[] itemIDs, DataModel dataModel) throws TasteException {
-    return doGetCandidateItems(itemIDs, dataModel);
+  public FastIDSet getCandidateItems(long userID, PreferenceArray preferencesFromUser, DataModel dataModel,
+      boolean includeKnownItems) throws TasteException {
+    return doGetCandidateItems(preferencesFromUser.getIDs(), dataModel, includeKnownItems);
   }
-
-  protected abstract FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException;
-
+  
   @Override
-  public void refresh(Collection<Refreshable> alreadyRefreshed) {
+  public FastIDSet getCandidateItems(long[] itemIDs, DataModel dataModel)
+    throws TasteException {
+    return doGetCandidateItems(itemIDs, dataModel, false);
   }
+     
+  protected abstract FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel,
+      boolean includeKnownItems) throws TasteException;
+  
+  @Override
+  public void refresh(Collection<Refreshable> alreadyRefreshed) {}
 }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AbstractRecommender.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AbstractRecommender.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AbstractRecommender.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AbstractRecommender.java	2015-08-14 10:25:54.653872470 +0200
@@ -19,11 +19,13 @@
 
 import org.apache.mahout.cf.taste.model.PreferenceArray;
 import org.apache.mahout.cf.taste.recommender.CandidateItemsStrategy;
+
 import java.util.List;
 
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.impl.common.FastIDSet;
 import org.apache.mahout.cf.taste.model.DataModel;
+import org.apache.mahout.cf.taste.recommender.IDRescorer;
 import org.apache.mahout.cf.taste.recommender.RecommendedItem;
 import org.apache.mahout.cf.taste.recommender.Recommender;
 import org.slf4j.Logger;
@@ -51,6 +53,7 @@
     return new PreferredItemsNeighborhoodCandidateItemsStrategy();
   }
 
+
   /**
    * <p>
    * Default implementation which just calls
@@ -60,7 +63,27 @@
    */
   @Override
   public List<RecommendedItem> recommend(long userID, int howMany) throws TasteException {
-    return recommend(userID, howMany, null);
+    return recommend(userID, howMany, null, false);
+  }
+
+  /**
+   * <p>
+   * Default implementation which just calls
+   * {@link Recommender#recommend(long, int, org.apache.mahout.cf.taste.recommender.IDRescorer)}, with a
+   * {@link org.apache.mahout.cf.taste.recommender.Rescorer} that does nothing.
+   * </p>
+   */
+  @Override
+  public List<RecommendedItem> recommend(long userID, int howMany, boolean includeKnownItems) throws TasteException {
+    return recommend(userID, howMany, null, includeKnownItems);
+  }
+  
+  /**
+   * <p> Delegates to {@link Recommender#recommend(long, int, IDRescorer, boolean)}
+   */
+  @Override
+  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException{
+    return recommend(userID, howMany,rescorer, false);  
   }
   
   /**
@@ -96,19 +119,22 @@
   public DataModel getDataModel() {
     return dataModel;
   }
-  
+
   /**
    * @param userID
    *          ID of user being evaluated
    * @param preferencesFromUser
    *          the preferences from the user
+   * @param includeKnownItems
+   *          whether to include items already known by the user in recommendations
    * @return all items in the {@link DataModel} for which the user has not expressed a preference and could
    *         possibly be recommended to the user
    * @throws TasteException
    *           if an error occurs while listing items
    */
-  protected FastIDSet getAllOtherItems(long userID, PreferenceArray preferencesFromUser) throws TasteException {
-    return candidateItemsStrategy.getCandidateItems(userID, preferencesFromUser, dataModel);
+  protected FastIDSet getAllOtherItems(long userID, PreferenceArray preferencesFromUser, boolean includeKnownItems)
+      throws TasteException {
+    return candidateItemsStrategy.getCandidateItems(userID, preferencesFromUser, dataModel, includeKnownItems);
   }
   
 }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AllSimilarItemsCandidateItemsStrategy.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AllSimilarItemsCandidateItemsStrategy.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AllSimilarItemsCandidateItemsStrategy.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AllSimilarItemsCandidateItemsStrategy.java	2015-08-14 10:25:54.653872470 +0200
@@ -36,12 +36,15 @@
   }
 
   @Override
-  protected FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException {
+  protected FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel, boolean includeKnownItems)
+    throws TasteException {
     FastIDSet candidateItemIDs = new FastIDSet();
     for (long itemID : preferredItemIDs) {
       candidateItemIDs.addAll(similarity.allSimilarItemIDs(itemID));
     }
-    candidateItemIDs.removeAll(preferredItemIDs);
+    if (!includeKnownItems) {
+      candidateItemIDs.removeAll(preferredItemIDs);
+    }
     return candidateItemIDs;
   }
 }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AllUnknownItemsCandidateItemsStrategy.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AllUnknownItemsCandidateItemsStrategy.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AllUnknownItemsCandidateItemsStrategy.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AllUnknownItemsCandidateItemsStrategy.java	2015-08-14 10:25:54.653872470 +0200
@@ -24,17 +24,18 @@
 
 public final class AllUnknownItemsCandidateItemsStrategy extends AbstractCandidateItemsStrategy {
 
-  /**
-   * return all items the user has not yet seen
-   */
+  /** return all items the user has not yet seen */
   @Override
-  protected FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException {
+  protected FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel, boolean includeKnownItems)
+    throws TasteException {
     FastIDSet possibleItemIDs = new FastIDSet(dataModel.getNumItems());
     LongPrimitiveIterator allItemIDs = dataModel.getItemIDs();
     while (allItemIDs.hasNext()) {
       possibleItemIDs.add(allItemIDs.nextLong());
     }
-    possibleItemIDs.removeAll(preferredItemIDs);
+    if (!includeKnownItems) {
+      possibleItemIDs.removeAll(preferredItemIDs);
+    }
     return possibleItemIDs;
   }
 }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/CachingRecommender.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/CachingRecommender.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/CachingRecommender.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/CachingRecommender.java	2015-08-14 10:25:54.657205860 +0200
@@ -41,6 +41,8 @@
 /**
  * <p>
  * A {@link Recommender} which caches the results from another {@link Recommender} in memory.
+ *
+ * TODO: Should be checked for thread safety
  * </p>
  */
 public final class CachingRecommender implements Recommender {
@@ -54,6 +56,7 @@
   private final Cache<LongPair,Float> estimatedPrefCache;
   private final RefreshHelper refreshHelper;
   private IDRescorer currentRescorer;
+  private boolean currentlyIncludeKnownItems;
   
   public CachingRecommender(Recommender recommender) throws TasteException {
     Preconditions.checkArgument(recommender != null, "recommender is null");
@@ -62,8 +65,8 @@
     // Use "num users" as an upper limit on cache size. Rough guess.
     int numUsers = recommender.getDataModel().getNumUsers();
     recommendationsRetriever = new RecommendationRetriever();
-    recommendationCache = new Cache<Long, Recommendations>(recommendationsRetriever, numUsers);
-    estimatedPrefCache = new Cache<LongPair, Float>(new EstimatedPrefRetriever(), numUsers);
+    recommendationCache = new Cache<>(recommendationsRetriever, numUsers);
+    estimatedPrefCache = new Cache<>(new EstimatedPrefRetriever(), numUsers);
     refreshHelper = new RefreshHelper(new Callable<Object>() {
       @Override
       public Object call() {
@@ -87,14 +90,29 @@
       }
     }
   }
-  
+
+  public void setCurrentlyIncludeKnownItems(boolean currentlyIncludeKnownItems) {
+    this.currentlyIncludeKnownItems = currentlyIncludeKnownItems;
+  }
+
   @Override
   public List<RecommendedItem> recommend(long userID, int howMany) throws TasteException {
-    return recommend(userID, howMany, null);
+    return recommend(userID, howMany, null, false);
   }
-  
+
+  @Override
+  public List<RecommendedItem> recommend(long userID, int howMany, boolean includeKnownItems) throws TasteException {
+    return recommend(userID, howMany, null, includeKnownItems);
+  }
+
+  @Override
+  public List<RecommendedItem> recommend(long userID, int howMany,IDRescorer rescorer) throws TasteException {
+      return recommend(userID, howMany, rescorer, false);
+  }
+ 
   @Override
-  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
+  public List<RecommendedItem> recommend(long userID, int howMany,IDRescorer rescorer, boolean includeKnownItems)
+    throws TasteException {
     Preconditions.checkArgument(howMany >= 1, "howMany must be at least 1");
     synchronized (maxHowMany) {
       if (howMany > maxHowMany[0]) {
@@ -108,6 +126,7 @@
     }
 
     setCurrentRescorer(rescorer);
+    setCurrentlyIncludeKnownItems(includeKnownItems);
 
     Recommendations recommendations = recommendationCache.get(userID);
     if (recommendations.getItems().size() < howMany && !recommendations.isNoMoreRecommendableItems()) {
@@ -191,7 +210,8 @@
       int howMany = maxHowMany[0];
       IDRescorer rescorer = currentRescorer;
       List<RecommendedItem> recommendations =
-          rescorer == null ? recommender.recommend(key, howMany) : recommender.recommend(key, howMany, rescorer);
+          rescorer == null ? recommender.recommend(key, howMany, null, currentlyIncludeKnownItems) :
+              recommender.recommend(key, howMany, rescorer, currentlyIncludeKnownItems);
       return new Recommendations(Collections.unmodifiableList(recommendations));
     }
   }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/GenericBooleanPrefUserBasedRecommender.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/GenericBooleanPrefUserBasedRecommender.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/GenericBooleanPrefUserBasedRecommender.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/GenericBooleanPrefUserBasedRecommender.java	2015-08-14 10:25:54.657205860 +0200
@@ -61,13 +61,16 @@
   }
   
   @Override
-  protected FastIDSet getAllOtherItems(long[] theNeighborhood, long theUserID) throws TasteException {
+  protected FastIDSet getAllOtherItems(long[] theNeighborhood, long theUserID, boolean includeKnownItems)
+      throws TasteException {
     DataModel dataModel = getDataModel();
     FastIDSet possibleItemIDs = new FastIDSet();
     for (long userID : theNeighborhood) {
       possibleItemIDs.addAll(dataModel.getItemIDsFromUser(userID));
     }
-    possibleItemIDs.removeAll(dataModel.getItemIDsFromUser(theUserID));
+    if (!includeKnownItems) {
+      possibleItemIDs.removeAll(dataModel.getItemIDsFromUser(theUserID));
+    }
     return possibleItemIDs;
   }
   
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/GenericItemBasedRecommender.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/GenericItemBasedRecommender.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/GenericItemBasedRecommender.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/GenericItemBasedRecommender.java	2015-08-14 10:25:54.657205860 +0200
@@ -17,7 +17,6 @@
 
 package org.apache.mahout.cf.taste.impl.recommender;
 
-import org.apache.mahout.cf.taste.recommender.CandidateItemsStrategy;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
@@ -31,6 +30,7 @@
 import org.apache.mahout.cf.taste.impl.common.RunningAverage;
 import org.apache.mahout.cf.taste.model.DataModel;
 import org.apache.mahout.cf.taste.model.PreferenceArray;
+import org.apache.mahout.cf.taste.recommender.CandidateItemsStrategy;
 import org.apache.mahout.cf.taste.recommender.IDRescorer;
 import org.apache.mahout.cf.taste.recommender.ItemBasedRecommender;
 import org.apache.mahout.cf.taste.recommender.MostSimilarItemsCandidateItemsStrategy;
@@ -117,7 +117,8 @@
   }
   
   @Override
-  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
+  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems)
+    throws TasteException {
     Preconditions.checkArgument(howMany >= 1, "howMany must be at least 1");
     log.debug("Recommending items for user ID '{}'", userID);
 
@@ -126,7 +127,7 @@
       return Collections.emptyList();
     }
 
-    FastIDSet possibleItemIDs = getAllOtherItems(userID, preferencesFromUser);
+    FastIDSet possibleItemIDs = getAllOtherItems(userID, preferencesFromUser, includeKnownItems);
 
     TopItems.Estimator<Long> estimator = new Estimator(userID, preferencesFromUser);
 
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/GenericUserBasedRecommender.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/GenericUserBasedRecommender.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/GenericUserBasedRecommender.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/GenericUserBasedRecommender.java	2015-08-14 10:25:54.657205860 +0200
@@ -79,7 +79,8 @@
   }
   
   @Override
-  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
+  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems)
+    throws TasteException {
     Preconditions.checkArgument(howMany >= 1, "howMany must be at least 1");
 
     log.debug("Recommending items for user ID '{}'", userID);
@@ -90,7 +91,7 @@
       return Collections.emptyList();
     }
 
-    FastIDSet allItemIDs = getAllOtherItems(theNeighborhood, userID);
+    FastIDSet allItemIDs = getAllOtherItems(theNeighborhood, userID, includeKnownItems);
 
     TopItems.Estimator<Long> estimator = new Estimator(userID, theNeighborhood);
 
@@ -165,13 +166,16 @@
     return estimate;
   }
   
-  protected FastIDSet getAllOtherItems(long[] theNeighborhood, long theUserID) throws TasteException {
+  protected FastIDSet getAllOtherItems(long[] theNeighborhood, long theUserID, boolean includeKnownItems)
+    throws TasteException {
     DataModel dataModel = getDataModel();
     FastIDSet possibleItemIDs = new FastIDSet();
     for (long userID : theNeighborhood) {
       possibleItemIDs.addAll(dataModel.getItemIDsFromUser(userID));
     }
-    possibleItemIDs.removeAll(dataModel.getItemIDsFromUser(theUserID));
+    if (!includeKnownItems) {
+      possibleItemIDs.removeAll(dataModel.getItemIDsFromUser(theUserID));
+    }
     return possibleItemIDs;
   }
   
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemAverageRecommender.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemAverageRecommender.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemAverageRecommender.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemAverageRecommender.java	2015-08-14 10:25:54.657205860 +0200
@@ -58,7 +58,7 @@
   
   public ItemAverageRecommender(DataModel dataModel) throws TasteException {
     super(dataModel);
-    this.itemAverages = new FastByIDMap<RunningAverage>();
+    this.itemAverages = new FastByIDMap<>();
     this.buildAveragesLock = new ReentrantReadWriteLock();
     this.refreshHelper = new RefreshHelper(new Callable<Object>() {
       @Override
@@ -72,12 +72,13 @@
   }
   
   @Override
-  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
+  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems)
+    throws TasteException {
     Preconditions.checkArgument(howMany >= 1, "howMany must be at least 1");
     log.debug("Recommending items for user ID '{}'", userID);
 
     PreferenceArray preferencesFromUser = getDataModel().getPreferencesFromUser(userID);
-    FastIDSet possibleItemIDs = getAllOtherItems(userID, preferencesFromUser);
+    FastIDSet possibleItemIDs = getAllOtherItems(userID, preferencesFromUser, includeKnownItems);
 
     TopItems.Estimator<Long> estimator = new Estimator();
 
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemUserAverageRecommender.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemUserAverageRecommender.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemUserAverageRecommender.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemUserAverageRecommender.java	2015-08-14 10:25:54.657205860 +0200
@@ -61,8 +61,8 @@
   
   public ItemUserAverageRecommender(DataModel dataModel) throws TasteException {
     super(dataModel);
-    this.itemAverages = new FastByIDMap<RunningAverage>();
-    this.userAverages = new FastByIDMap<RunningAverage>();
+    this.itemAverages = new FastByIDMap<>();
+    this.userAverages = new FastByIDMap<>();
     this.overallAveragePrefValue = new FullRunningAverage();
     this.buildAveragesLock = new ReentrantReadWriteLock();
     this.refreshHelper = new RefreshHelper(new Callable<Object>() {
@@ -77,12 +77,13 @@
   }
   
   @Override
-  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
+  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems)
+    throws TasteException {
     Preconditions.checkArgument(howMany >= 1, "howMany must be at least 1");
     log.debug("Recommending items for user ID '{}'", userID);
 
     PreferenceArray preferencesFromUser = getDataModel().getPreferencesFromUser(userID);
-    FastIDSet possibleItemIDs = getAllOtherItems(userID, preferencesFromUser);
+    FastIDSet possibleItemIDs = getAllOtherItems(userID, preferencesFromUser, includeKnownItems);
 
     TopItems.Estimator<Long> estimator = new Estimator(userID);
 
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/NullRescorer.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/NullRescorer.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/NullRescorer.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/NullRescorer.java	2015-08-14 10:25:54.657205860 +0200
@@ -29,8 +29,8 @@
 public final class NullRescorer<T> implements Rescorer<T>, IDRescorer {
   
   private static final IDRescorer USER_OR_ITEM_INSTANCE = new NullRescorer<Long>();
-  private static final Rescorer<LongPair> ITEM_ITEM_PAIR_INSTANCE = new NullRescorer<LongPair>();
-  private static final Rescorer<LongPair> USER_USER_PAIR_INSTANCE = new NullRescorer<LongPair>();
+  private static final Rescorer<LongPair> ITEM_ITEM_PAIR_INSTANCE = new NullRescorer<>();
+  private static final Rescorer<LongPair> USER_USER_PAIR_INSTANCE = new NullRescorer<>();
 
   private NullRescorer() {
   }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/PreferredItemsNeighborhoodCandidateItemsStrategy.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/PreferredItemsNeighborhoodCandidateItemsStrategy.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/PreferredItemsNeighborhoodCandidateItemsStrategy.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/PreferredItemsNeighborhoodCandidateItemsStrategy.java	2015-08-14 10:25:54.657205860 +0200
@@ -29,7 +29,8 @@
    * that has preferred at least one item that the current user has preferred too
    */
   @Override
-  protected FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException {
+  protected FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel, boolean includeKnownItems)
+    throws TasteException {
     FastIDSet possibleItemsIDs = new FastIDSet();
     for (long itemID : preferredItemIDs) {
       PreferenceArray itemPreferences = dataModel.getPreferencesForItem(itemID);
@@ -38,7 +39,9 @@
         possibleItemsIDs.addAll(dataModel.getItemIDsFromUser(itemPreferences.getUserID(index)));
       }
     }
-    possibleItemsIDs.removeAll(preferredItemIDs);
+    if (!includeKnownItems) {
+      possibleItemsIDs.removeAll(preferredItemIDs);
+    }
     return possibleItemsIDs;
   }
 
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/RandomRecommender.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/RandomRecommender.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/RandomRecommender.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/RandomRecommender.java	2015-08-14 10:25:54.657205860 +0200
@@ -17,11 +17,11 @@
 
 package org.apache.mahout.cf.taste.impl.recommender;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 
-import com.google.common.collect.Lists;
 import org.apache.mahout.cf.taste.common.Refreshable;
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
@@ -62,17 +62,18 @@
     this.minPref = minPref;
     this.maxPref = maxPref;
   }
-  
+
   @Override
-  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
+  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems)
+    throws TasteException {
     DataModel dataModel = getDataModel();
     int numItems = dataModel.getNumItems();
-    List<RecommendedItem> result = Lists.newArrayListWithCapacity(howMany);
+    List<RecommendedItem> result = new ArrayList<>(howMany);
     while (result.size() < howMany) {
       LongPrimitiveIterator it = dataModel.getItemIDs();
       it.skip(random.nextInt(numItems));
       long itemID = it.next();
-      if (dataModel.getPreferenceValue(userID, itemID) == null) {
+      if (includeKnownItems || dataModel.getPreferenceValue(userID, itemID) == null) {
         result.add(new GenericRecommendedItem(itemID, randomPref()));
       }
     }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/SamplingCandidateItemsStrategy.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/SamplingCandidateItemsStrategy.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/SamplingCandidateItemsStrategy.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/SamplingCandidateItemsStrategy.java	2015-08-14 10:25:54.657205860 +0200
@@ -118,7 +118,8 @@
   }
 
   @Override
-  protected FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException {
+  protected FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel, boolean includeKnownItems)
+    throws TasteException {
     LongPrimitiveIterator preferredItemIDsIterator = new LongPrimitiveArrayIterator(preferredItemIDs);
     if (preferredItemIDs.length > maxItems) {
       double samplingRate = (double) maxItems / preferredItemIDs.length;
@@ -133,7 +134,7 @@
       int prefsLength = prefs.length();
       if (prefsLength > maxUsersPerItem) {
         Iterator<Preference> sampledPrefs =
-            new FixedSizeSamplingIterator<Preference>(maxUsersPerItem, prefs.iterator());
+            new FixedSizeSamplingIterator<>(maxUsersPerItem, prefs.iterator());
         while (sampledPrefs.hasNext()) {
           addSomeOf(possibleItemsIDs, dataModel.getItemIDsFromUser(sampledPrefs.next().getUserID()));
         }
@@ -143,7 +144,9 @@
         }
       }
     }
-    possibleItemsIDs.removeAll(preferredItemIDs);
+    if (!includeKnownItems) {
+      possibleItemsIDs.removeAll(preferredItemIDs);
+    }
     return possibleItemsIDs;
   }
 
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/ALSWRFactorizer.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/ALSWRFactorizer.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/ALSWRFactorizer.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/ALSWRFactorizer.java	2015-08-14 10:25:54.657205860 +0200
@@ -17,7 +17,13 @@
 
 package org.apache.mahout.cf.taste.impl.recommender.svd;
 
-import com.google.common.collect.Lists;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
+
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
 import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
@@ -31,17 +37,10 @@
 import org.apache.mahout.math.Vector;
 import org.apache.mahout.math.als.AlternatingLeastSquaresSolver;
 import org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver;
+import org.apache.mahout.math.map.OpenIntObjectHashMap;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import org.apache.mahout.math.map.OpenIntObjectHashMap;
-
-import java.util.List;
-import java.util.Random;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.TimeUnit;
-
 /**
  * factorizes the rating matrix using "Alternating-Least-Squares with Weighted-λ-Regularization" as described in
  * <a href="http://www.hpl.hp.com/personal/Robert_Schreiber/papers/2008%20AAIM%20Netflix/netflix_aaim08(submitted).pdf">
@@ -181,7 +180,8 @@
       try {
 
         final ImplicitFeedbackAlternatingLeastSquaresSolver implicitFeedbackSolver = usesImplicitFeedback
-            ? new ImplicitFeedbackAlternatingLeastSquaresSolver(numFeatures, lambda, alpha, itemY) : null;
+            ? new ImplicitFeedbackAlternatingLeastSquaresSolver(numFeatures, lambda, alpha, itemY, numTrainingThreads)
+            : null;
 
         while (userIDsIterator.hasNext()) {
           final long userID = userIDsIterator.nextLong();
@@ -190,7 +190,7 @@
           queue.execute(new Runnable() {
             @Override
             public void run() {
-              List<Vector> featureVectors = Lists.newArrayList();
+              List<Vector> featureVectors = new ArrayList<>();
               while (itemIDsFromUser.hasNext()) {
                 long itemID = itemIDsFromUser.nextLong();
                 featureVectors.add(features.getItemFeatureColumn(itemIndex(itemID)));
@@ -219,7 +219,8 @@
       try {
 
         final ImplicitFeedbackAlternatingLeastSquaresSolver implicitFeedbackSolver = usesImplicitFeedback
-            ? new ImplicitFeedbackAlternatingLeastSquaresSolver(numFeatures, lambda, alpha, userY) : null;
+            ? new ImplicitFeedbackAlternatingLeastSquaresSolver(numFeatures, lambda, alpha, userY, numTrainingThreads)
+            : null;
 
         while (itemIDsIterator.hasNext()) {
           final long itemID = itemIDsIterator.nextLong();
@@ -227,7 +228,7 @@
           queue.execute(new Runnable() {
             @Override
             public void run() {
-              List<Vector> featureVectors = Lists.newArrayList();
+              List<Vector> featureVectors = new ArrayList<>();
               for (Preference pref : itemPrefs) {
                 long userID = pref.getUserID();
                 featureVectors.add(features.getUserFeatureColumn(userIndex(userID)));
@@ -270,10 +271,11 @@
   //TODO find a way to get rid of the object overhead here
   protected OpenIntObjectHashMap<Vector> itemFeaturesMapping(LongPrimitiveIterator itemIDs, int numItems,
       double[][] featureMatrix) {
-    OpenIntObjectHashMap<Vector> mapping = new OpenIntObjectHashMap<Vector>(numItems);
+    OpenIntObjectHashMap<Vector> mapping = new OpenIntObjectHashMap<>(numItems);
     while (itemIDs.hasNext()) {
       long itemID = itemIDs.next();
-      mapping.put((int) itemID, new DenseVector(featureMatrix[itemIndex(itemID)], true));
+      int itemIndex = itemIndex(itemID);
+      mapping.put(itemIndex, new DenseVector(featureMatrix[itemIndex(itemID)], true));
     }
 
     return mapping;
@@ -281,11 +283,12 @@
 
   protected OpenIntObjectHashMap<Vector> userFeaturesMapping(LongPrimitiveIterator userIDs, int numUsers,
       double[][] featureMatrix) {
-    OpenIntObjectHashMap<Vector> mapping = new OpenIntObjectHashMap<Vector>(numUsers);
+    OpenIntObjectHashMap<Vector> mapping = new OpenIntObjectHashMap<>(numUsers);
 
     while (userIDs.hasNext()) {
       long userID = userIDs.next();
-      mapping.put((int) userID, new DenseVector(featureMatrix[userIndex(userID)], true));
+      int userIndex = userIndex(userID);
+      mapping.put(userIndex, new DenseVector(featureMatrix[userIndex(userID)], true));
     }
 
     return mapping;
@@ -294,7 +297,7 @@
   protected Vector sparseItemRatingVector(PreferenceArray prefs) {
     SequentialAccessSparseVector ratings = new SequentialAccessSparseVector(Integer.MAX_VALUE, prefs.length());
     for (Preference preference : prefs) {
-      ratings.set((int) preference.getUserID(), preference.getValue());
+      ratings.set(userIndex(preference.getUserID()), preference.getValue());
     }
     return ratings;
   }
@@ -302,7 +305,7 @@
   protected Vector sparseUserRatingVector(PreferenceArray prefs) {
     SequentialAccessSparseVector ratings = new SequentialAccessSparseVector(Integer.MAX_VALUE, prefs.length());
     for (Preference preference : prefs) {
-      ratings.set((int) preference.getItemID(), preference.getValue());
+      ratings.set(itemIndex(preference.getItemID()), preference.getValue());
     }
     return ratings;
   }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/Factorization.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/Factorization.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/Factorization.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/Factorization.java	2015-08-14 10:25:54.657205860 +0200
@@ -24,6 +24,7 @@
 import org.apache.mahout.cf.taste.common.NoSuchItemException;
 import org.apache.mahout.cf.taste.common.NoSuchUserException;
 import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
+import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
 
 /**
  * a factorization of the rating matrix
@@ -83,6 +84,10 @@
   public Iterable<Map.Entry<Long,Integer>> getUserIDMappings() {
     return userIDMapping.entrySet();
   }
+  
+  public LongPrimitiveIterator getUserIDMappingKeys() {
+    return userIDMapping.keySetIterator();
+  }
 
   public int itemIndex(long itemID) throws NoSuchItemException {
     Integer index = itemIDMapping.get(itemID);
@@ -95,6 +100,10 @@
   public Iterable<Map.Entry<Long,Integer>> getItemIDMappings() {
     return itemIDMapping.entrySet();
   }
+  
+  public LongPrimitiveIterator getItemIDMappingKeys() {
+    return itemIDMapping.keySetIterator();
+  }
 
   public int numFeatures() {
     return userFeatures.length > 0 ? userFeatures[0].length : 0;
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/FilePersistenceStrategy.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/FilePersistenceStrategy.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/FilePersistenceStrategy.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/FilePersistenceStrategy.java	2015-08-14 10:25:54.657205860 +0200
@@ -30,7 +30,6 @@
 import java.util.Map;
 
 import com.google.common.base.Preconditions;
-import com.google.common.io.Closeables;
 import org.apache.mahout.cf.taste.common.NoSuchItemException;
 import org.apache.mahout.cf.taste.common.NoSuchUserException;
 import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
@@ -57,25 +56,17 @@
       log.info("{} does not yet exist, no factorization found", file.getAbsolutePath());
       return null;
     }
-    DataInputStream in = null;
-    try {
+    try (DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(file)))){
       log.info("Reading factorization from {}...", file.getAbsolutePath());
-      in = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
       return readBinary(in);
-    } finally {
-      Closeables.close(in, true);
     }
   }
 
   @Override
   public void maybePersist(Factorization factorization) throws IOException {
-    DataOutputStream out = null;
-    try {
+    try (DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)))){
       log.info("Writing factorization to {}...", file.getAbsolutePath());
-      out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
       writeBinary(factorization, out);
-    } finally {
-      Closeables.close(out, false);
     }
   }
 
@@ -118,7 +109,7 @@
     int numUsers = in.readInt();
     int numItems = in.readInt();
 
-    FastByIDMap<Integer> userIDMapping = new FastByIDMap<Integer>(numUsers);
+    FastByIDMap<Integer> userIDMapping = new FastByIDMap<>(numUsers);
     double[][] userFeatures = new double[numUsers][numFeatures];
 
     for (int n = 0; n < numUsers; n++) {
@@ -130,7 +121,7 @@
       }
     }
 
-    FastByIDMap<Integer> itemIDMapping = new FastByIDMap<Integer>(numItems);
+    FastByIDMap<Integer> itemIDMapping = new FastByIDMap<>(numItems);
     double[][] itemFeatures = new double[numItems][numFeatures];
 
     for (int n = 0; n < numItems; n++) {
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/ParallelSGDFactorizer.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/ParallelSGDFactorizer.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/ParallelSGDFactorizer.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/ParallelSGDFactorizer.java	2015-08-14 10:25:54.657205860 +0200
@@ -121,7 +121,7 @@
       }
     }
 
-    public void shuffle() {
+    public final void shuffle() {
       unstagedPreferences = preferences.clone();
       /* Durstenfeld shuffle */
       for (int i = unstagedPreferences.length - 1; i > 0; i--) {
@@ -138,7 +138,7 @@
       unstagedPreferences[y] = p;
     }
 
-    public void stage() {
+    public final void stage() {
       preferences = unstagedPreferences;
     }
 
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/SVDPlusPlusFactorizer.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/SVDPlusPlusFactorizer.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/SVDPlusPlusFactorizer.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/SVDPlusPlusFactorizer.java	2015-08-14 10:25:54.657205860 +0200
@@ -17,14 +17,14 @@
 
 package org.apache.mahout.cf.taste.impl.recommender.svd;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
+import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.impl.common.FastIDSet;
 import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
+import org.apache.mahout.cf.taste.model.DataModel;
 import org.apache.mahout.common.RandomUtils;
 
-import org.apache.mahout.cf.taste.common.TasteException;
-import org.apache.mahout.cf.taste.model.DataModel;
+import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
@@ -80,13 +80,13 @@
     }
 
     /* get internal item IDs which we will need several times */
-    itemsByUser = Maps.newHashMap();
+    itemsByUser = new HashMap<>();
     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
     while (userIDs.hasNext()) {
       long userId = userIDs.nextLong();
       int userIndex = userIndex(userId);
       FastIDSet itemIDsFromUser = dataModel.getItemIDsFromUser(userId);
-      List<Integer> itemIndexes = Lists.newArrayListWithCapacity(itemIDsFromUser.size());
+      List<Integer> itemIndexes = new ArrayList<>(itemIDsFromUser.size());
       itemsByUser.put(userIndex, itemIndexes);
       for (long itemID2 : itemIDsFromUser) {
         int i2 = itemIndex(itemID2);
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/SVDRecommender.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/SVDRecommender.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/SVDRecommender.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/SVDRecommender.java	2015-08-14 10:25:54.657205860 +0200
@@ -28,6 +28,7 @@
 import org.apache.mahout.cf.taste.impl.common.FastIDSet;
 import org.apache.mahout.cf.taste.impl.common.RefreshHelper;
 import org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender;
+import org.apache.mahout.cf.taste.impl.recommender.AllUnknownItemsCandidateItemsStrategy;
 import org.apache.mahout.cf.taste.impl.recommender.TopItems;
 import org.apache.mahout.cf.taste.model.DataModel;
 import org.apache.mahout.cf.taste.model.PreferenceArray;
@@ -51,7 +52,7 @@
   private static final Logger log = LoggerFactory.getLogger(SVDRecommender.class);
 
   public SVDRecommender(DataModel dataModel, Factorizer factorizer) throws TasteException {
-    this(dataModel, factorizer, getDefaultCandidateItemsStrategy(), getDefaultPersistenceStrategy());
+    this(dataModel, factorizer, new AllUnknownItemsCandidateItemsStrategy(), getDefaultPersistenceStrategy());
   }
 
   public SVDRecommender(DataModel dataModel, Factorizer factorizer, CandidateItemsStrategy candidateItemsStrategy)
@@ -130,12 +131,13 @@
   }
   
   @Override
-  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
+  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems)
+    throws TasteException {
     Preconditions.checkArgument(howMany >= 1, "howMany must be at least 1");
     log.debug("Recommending items for user ID '{}'", userID);
 
     PreferenceArray preferencesFromUser = getDataModel().getPreferencesFromUser(userID);
-    FastIDSet possibleItemIDs = getAllOtherItems(userID, preferencesFromUser);
+    FastIDSet possibleItemIDs = getAllOtherItems(userID, preferencesFromUser, includeKnownItems);
 
     List<RecommendedItem> topItems = TopItems.getTopItems(howMany, possibleItemIDs.iterator(), rescorer,
         new Estimator(userID));
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TopItems.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TopItems.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TopItems.java	2015-08-14 10:37:10.375409658 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TopItems.java	2015-08-14 10:25:54.657205860 +0200
@@ -17,13 +17,14 @@
 
 package org.apache.mahout.cf.taste.impl.recommender;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.PriorityQueue;
 import java.util.Queue;
 
-import com.google.common.collect.Lists;
+import com.google.common.base.Preconditions;
 import org.apache.mahout.cf.taste.common.NoSuchItemException;
 import org.apache.mahout.cf.taste.common.NoSuchUserException;
 import org.apache.mahout.cf.taste.common.TasteException;
@@ -33,8 +34,6 @@
 import org.apache.mahout.cf.taste.recommender.IDRescorer;
 import org.apache.mahout.cf.taste.recommender.RecommendedItem;
 
-import com.google.common.base.Preconditions;
-
 /**
  * <p>
  * A simple class that refactors the "find top N things" logic that is used in several places.
@@ -53,7 +52,7 @@
     Preconditions.checkArgument(possibleItemIDs != null, "possibleItemIDs is null");
     Preconditions.checkArgument(estimator != null, "estimator is null");
 
-    Queue<RecommendedItem> topItems = new PriorityQueue<RecommendedItem>(howMany + 1,
+    Queue<RecommendedItem> topItems = new PriorityQueue<>(howMany + 1,
       Collections.reverseOrder(ByValueRecommendedItemComparator.getInstance()));
     boolean full = false;
     double lowestTopValue = Double.NEGATIVE_INFINITY;
@@ -83,7 +82,7 @@
     if (size == 0) {
       return Collections.emptyList();
     }
-    List<RecommendedItem> result = Lists.newArrayListWithCapacity(size);
+    List<RecommendedItem> result = new ArrayList<>(size);
     result.addAll(topItems);
     Collections.sort(result, ByValueRecommendedItemComparator.getInstance());
     return result;
@@ -93,7 +92,7 @@
                                    LongPrimitiveIterator allUserIDs,
                                    IDRescorer rescorer,
                                    Estimator<Long> estimator) throws TasteException {
-    Queue<SimilarUser> topUsers = new PriorityQueue<SimilarUser>(howMany + 1, Collections.reverseOrder());
+    Queue<SimilarUser> topUsers = new PriorityQueue<>(howMany + 1, Collections.reverseOrder());
     boolean full = false;
     double lowestTopValue = Double.NEGATIVE_INFINITY;
     while (allUserIDs.hasNext()) {
@@ -123,7 +122,7 @@
     if (size == 0) {
       return NO_IDS;
     }
-    List<SimilarUser> sorted = Lists.newArrayListWithCapacity(size);
+    List<SimilarUser> sorted = new ArrayList<>(size);
     sorted.addAll(topUsers);
     Collections.sort(sorted);
     long[] result = new long[size];
@@ -147,7 +146,7 @@
     int howMany, Iterator<GenericItemSimilarity.ItemItemSimilarity> allSimilarities) {
     
     Queue<GenericItemSimilarity.ItemItemSimilarity> topSimilarities
-      = new PriorityQueue<GenericItemSimilarity.ItemItemSimilarity>(howMany + 1, Collections.reverseOrder());
+      = new PriorityQueue<>(howMany + 1, Collections.reverseOrder());
     boolean full = false;
     double lowestTopValue = Double.NEGATIVE_INFINITY;
     while (allSimilarities.hasNext()) {
@@ -168,7 +167,7 @@
     if (size == 0) {
       return Collections.emptyList();
     }
-    List<GenericItemSimilarity.ItemItemSimilarity> result = Lists.newArrayListWithCapacity(size);
+    List<GenericItemSimilarity.ItemItemSimilarity> result = new ArrayList<>(size);
     result.addAll(topSimilarities);
     Collections.sort(result);
     return result;
@@ -178,7 +177,7 @@
     int howMany, Iterator<GenericUserSimilarity.UserUserSimilarity> allSimilarities) {
     
     Queue<GenericUserSimilarity.UserUserSimilarity> topSimilarities
-      = new PriorityQueue<GenericUserSimilarity.UserUserSimilarity>(howMany + 1, Collections.reverseOrder());
+      = new PriorityQueue<>(howMany + 1, Collections.reverseOrder());
     boolean full = false;
     double lowestTopValue = Double.NEGATIVE_INFINITY;
     while (allSimilarities.hasNext()) {
@@ -199,7 +198,7 @@
     if (size == 0) {
       return Collections.emptyList();
     }
-    List<GenericUserSimilarity.UserUserSimilarity> result = Lists.newArrayListWithCapacity(size);
+    List<GenericUserSimilarity.UserUserSimilarity> result = new ArrayList<>(size);
     result.addAll(topSimilarities);
     Collections.sort(result);
     return result;
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AveragingPreferenceInferrer.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AveragingPreferenceInferrer.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AveragingPreferenceInferrer.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AveragingPreferenceInferrer.java	2015-08-14 10:25:54.657205860 +0200
@@ -46,7 +46,7 @@
   public AveragingPreferenceInferrer(DataModel dataModel) throws TasteException {
     this.dataModel = dataModel;
     Retriever<Long,Float> retriever = new PrefRetriever();
-    averagePreferenceValue = new Cache<Long,Float>(retriever, dataModel.getNumUsers());
+    averagePreferenceValue = new Cache<>(retriever, dataModel.getNumUsers());
     refresh(null);
   }
   
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingItemSimilarity.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingItemSimilarity.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingItemSimilarity.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingItemSimilarity.java	2015-08-14 10:25:54.657205860 +0200
@@ -54,7 +54,7 @@
   public CachingItemSimilarity(ItemSimilarity similarity, int maxCacheSize) {
     Preconditions.checkArgument(similarity != null, "similarity is null");
     this.similarity = similarity;
-    this.similarityCache = new Cache<LongPair,Double>(new SimilarityRetriever(similarity), maxCacheSize);
+    this.similarityCache = new Cache<>(new SimilarityRetriever(similarity), maxCacheSize);
     this.refreshHelper = new RefreshHelper(new Callable<Void>() {
       @Override
       public Void call() {
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingUserSimilarity.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingUserSimilarity.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingUserSimilarity.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingUserSimilarity.java	2015-08-14 10:25:54.657205860 +0200
@@ -56,7 +56,7 @@
   public CachingUserSimilarity(UserSimilarity similarity, int maxCacheSize) {
     Preconditions.checkArgument(similarity != null, "similarity is null");
     this.similarity = similarity;
-    this.similarityCache = new Cache<LongPair,Double>(new SimilarityRetriever(similarity), maxCacheSize);
+    this.similarityCache = new Cache<>(new SimilarityRetriever(similarity), maxCacheSize);
     this.refreshHelper = new RefreshHelper(new Callable<Void>() {
       @Override
       public Void call() {
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/EuclideanDistanceSimilarity.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/EuclideanDistanceSimilarity.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/EuclideanDistanceSimilarity.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/EuclideanDistanceSimilarity.java	2015-08-14 10:25:54.657205860 +0200
@@ -30,7 +30,7 @@
  * items (dimensions) where both users have expressed a preference for that item. This is simply the square
  * root of the sum of the squares of differences in position (preference) along each dimension.</p>
  * 
- * <p>The similarity could be computed as 1 / (1 + distance), so the resulting values are in the range (0,1].
+ * <p>The similarity could be computed as 1 / (1 + distance / sqrt(n)), so the resulting values are in the range (0,1].
  * This would weight against pairs that overlap in more dimensions, which should indicate more similarity, 
  * since more dimensions offer more opportunities to be farther apart. Actually, it is computed as 
  * sqrt(n) / (1 + distance), where n is the number of dimensions, in order to help correct for this.
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericItemSimilarity.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericItemSimilarity.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericItemSimilarity.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericItemSimilarity.java	2015-08-14 10:25:54.657205860 +0200
@@ -50,8 +50,8 @@
 
   private static final long[] NO_IDS = new long[0];
   
-  private final FastByIDMap<FastByIDMap<Double>> similarityMaps = new FastByIDMap<FastByIDMap<Double>>();
-  private final FastByIDMap<FastIDSet> similarItemIDsIndex = new FastByIDMap<FastIDSet>();
+  private final FastByIDMap<FastByIDMap<Double>> similarityMaps = new FastByIDMap<>();
+  private final FastByIDMap<FastIDSet> similarItemIDsIndex = new FastByIDMap<>();
 
   /**
    * <p>
@@ -166,7 +166,7 @@
         }
         FastByIDMap<Double> map = similarityMaps.get(itemID1);
         if (map == null) {
-          map = new FastByIDMap<Double>();
+          map = new FastByIDMap<>();
           similarityMaps.put(itemID1, map);
         }
         map.put(itemID2, iic.getValue());
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericUserSimilarity.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericUserSimilarity.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericUserSimilarity.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericUserSimilarity.java	2015-08-14 10:25:54.657205860 +0200
@@ -35,7 +35,7 @@
 
 public final class GenericUserSimilarity implements UserSimilarity {
   
-  private final FastByIDMap<FastByIDMap<Double>> similarityMaps = new FastByIDMap<FastByIDMap<Double>>();
+  private final FastByIDMap<FastByIDMap<Double>> similarityMaps = new FastByIDMap<>();
   
   public GenericUserSimilarity(Iterable<UserUserSimilarity> similarities) {
     initSimilarityMaps(similarities.iterator());
@@ -98,7 +98,7 @@
         }
         FastByIDMap<Double> map = similarityMaps.get(user1);
         if (map == null) {
-          map = new FastByIDMap<Double>();
+          map = new FastByIDMap<>();
           similarityMaps.put(user1, map);
         }
         map.put(user2, uuc.getValue());
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/precompute/FileSimilarItemsWriter.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/precompute/FileSimilarItemsWriter.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/precompute/FileSimilarItemsWriter.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/precompute/FileSimilarItemsWriter.java	2015-08-14 10:25:54.657205860 +0200
@@ -23,8 +23,8 @@
 import java.io.IOException;
 import java.io.OutputStreamWriter;
 
-import com.google.common.base.Charsets;
 import com.google.common.io.Closeables;
+import org.apache.commons.io.Charsets;
 import org.apache.mahout.cf.taste.similarity.precompute.SimilarItem;
 import org.apache.mahout.cf.taste.similarity.precompute.SimilarItems;
 import org.apache.mahout.cf.taste.similarity.precompute.SimilarItemsWriter;
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/precompute/MultithreadedBatchItemSimilarities.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/precompute/MultithreadedBatchItemSimilarities.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/precompute/MultithreadedBatchItemSimilarities.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/impl/similarity/precompute/MultithreadedBatchItemSimilarities.java	2015-08-14 10:25:54.657205860 +0200
@@ -17,16 +17,6 @@
 
 package org.apache.mahout.cf.taste.impl.similarity.precompute;
 
-import java.io.IOException;
-import java.util.List;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import com.google.common.collect.Lists;
 import com.google.common.io.Closeables;
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
@@ -39,6 +29,16 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+
 /**
  * Precompute item similarities in parallel on a single machine. The recommender given to this class must use a
  * DataModel that holds the interactions in memory (such as
@@ -83,8 +83,8 @@
 
       DataModel dataModel = getRecommender().getDataModel();
 
-      BlockingQueue<long[]> itemsIDsInBatches = queueItemIDsInBatches(dataModel, batchSize);
-      BlockingQueue<List<SimilarItems>> results = new LinkedBlockingQueue<List<SimilarItems>>();
+      BlockingQueue<long[]> itemsIDsInBatches = queueItemIDsInBatches(dataModel, batchSize, degreeOfParallelism);
+      BlockingQueue<List<SimilarItems>> results = new LinkedBlockingQueue<>();
 
       AtomicInteger numActiveWorkers = new AtomicInteger(degreeOfParallelism);
       for (int n = 0; n < degreeOfParallelism; n++) {
@@ -112,30 +112,37 @@
     return output.getNumSimilaritiesProcessed();
   }
 
-  private static BlockingQueue<long[]> queueItemIDsInBatches(DataModel dataModel, int batchSize) throws TasteException {
+  private static BlockingQueue<long[]> queueItemIDsInBatches(DataModel dataModel, int batchSize,
+                                                             int degreeOfParallelism)
+      throws TasteException {
 
     LongPrimitiveIterator itemIDs = dataModel.getItemIDs();
     int numItems = dataModel.getNumItems();
 
-    BlockingQueue<long[]> itemIDBatches = new LinkedBlockingQueue<long[]>((numItems / batchSize) + 1);
+    BlockingQueue<long[]> itemIDBatches = new LinkedBlockingQueue<>((numItems / batchSize) + 1);
 
     long[] batch = new long[batchSize];
     int pos = 0;
     while (itemIDs.hasNext()) {
+      batch[pos] = itemIDs.nextLong();
+      pos++;
       if (pos == batchSize) {
         itemIDBatches.add(batch.clone());
         pos = 0;
       }
-      batch[pos] = itemIDs.nextLong();
-      pos++;
     }
-    int nonQueuedItemIDs = batchSize - pos;
-    if (nonQueuedItemIDs > 0) {
-      long[] lastBatch = new long[nonQueuedItemIDs];
-      System.arraycopy(batch, 0, lastBatch, 0, nonQueuedItemIDs);
+
+    if (pos > 0) {
+      long[] lastBatch = new long[pos];
+      System.arraycopy(batch, 0, lastBatch, 0, pos);
       itemIDBatches.add(lastBatch);
     }
 
+    if (itemIDBatches.size() < degreeOfParallelism) {
+      throw new IllegalStateException("Degree of parallelism [" + degreeOfParallelism + "] " +
+          " is larger than number of batches [" + itemIDBatches.size() +"].");
+    }
+
     log.info("Queued {} items in {} batches", numItems, itemIDBatches.size());
 
     return itemIDBatches;
@@ -161,7 +168,7 @@
 
     @Override
     public void run() {
-      while (numActiveWorkers.get() != 0) {
+      while (numActiveWorkers.get() != 0 || !results.isEmpty()) {
         try {
           List<SimilarItems> similarItemsOfABatch = results.poll(10, TimeUnit.MILLISECONDS);
           if (similarItemsOfABatch != null) {
@@ -200,10 +207,9 @@
         try {
           long[] itemIDBatch = itemIDBatches.take();
 
-          List<SimilarItems> similarItemsOfBatch = Lists.newArrayListWithCapacity(itemIDBatch.length);
+          List<SimilarItems> similarItemsOfBatch = new ArrayList<>(itemIDBatch.length);
           for (long itemID : itemIDBatch) {
             List<RecommendedItem> similarItems = getRecommender().mostSimilarItems(itemID, getSimilarItemsPerItem());
-
             similarItemsOfBatch.add(new SimilarItems(itemID, similarItems));
           }
 
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/model/IDMigrator.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/model/IDMigrator.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/model/IDMigrator.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/model/IDMigrator.java	2015-08-14 10:25:54.657205860 +0200
@@ -50,8 +50,6 @@
   /**
    * @return the top 8 bytes of the MD5 hash of the bytes of the given {@link String}'s UTF-8 encoding as a
    *         long.
-   * @throws TasteException
-   *           if an error occurs while storing the mapping
    */
   long toLongID(String stringID);
   
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/recommender/CandidateItemsStrategy.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/recommender/CandidateItemsStrategy.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/recommender/CandidateItemsStrategy.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/recommender/CandidateItemsStrategy.java	2015-08-14 10:25:54.657205860 +0200
@@ -31,7 +31,7 @@
   /**
    * @return IDs of all items that could be recommended to the user
    */
-  FastIDSet getCandidateItems(long userID, PreferenceArray preferencesFromUser, DataModel dataModel)
-    throws TasteException;
+  FastIDSet getCandidateItems(long userID, PreferenceArray preferencesFromUser, DataModel dataModel,
+     boolean includeKnownItems) throws TasteException;
   
 }
diff -ur mahout09/core/src/main/java/org/apache/mahout/cf/taste/recommender/Recommender.java mahout011/mr/src/main/java/org/apache/mahout/cf/taste/recommender/Recommender.java
--- mahout09/core/src/main/java/org/apache/mahout/cf/taste/recommender/Recommender.java	2015-08-14 10:37:10.378743054 +0200
+++ mahout011/mr/src/main/java/org/apache/mahout/cf/taste/recommender/Recommender.java	2015-08-14 10:25:54.657205860 +0200
@@ -42,7 +42,21 @@
    *           if an error occurs while accessing the {@link DataModel}
    */
   List<RecommendedItem> recommend(long userID, int howMany) throws TasteException;
-  
+
+  /**
+   * @param userID
+   *          user for which recommendations are to be computed
+   * @param howMany
+   *          desired number of recommendations
+   * @return {@link List} of recommended {@link RecommendedItem}s, ordered from most strongly recommend to
+   *         least
+   * @param includeKnownItems
+   *          whether to include items already known by the user in recommendations
+   * @throws TasteException
+   *           if an error occurs while accessing the {@link DataModel}
+   */
+  List<RecommendedItem> recommend(long userID, int howMany, boolean includeKnownItems) throws TasteException;
+
   /**
    * @param userID
    *          user for which recommendations are to be computed
@@ -59,6 +73,24 @@
   
   /**
    * @param userID
+   *          user for which recommendations are to be computed
+   * @param howMany
+   *          desired number of recommendations
+   * @param rescorer
+   *          rescoring function to apply before final list of recommendations is determined
+   * @param includeKnownItems
+   *          whether to include items already known by the user in recommendations
+   * @return {@link List} of recommended {@link RecommendedItem}s, ordered from most strongly recommend to
+   *         least
+   * @throws TasteException
+   *           if an error occurs while accessing the {@link DataModel}
+   */
+  
+  List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems)
+      throws TasteException;
+  
+  /**
+   * @param userID
    *          user ID whose preference is to be estimated
    * @param itemID
    *          item ID to estimate preference for
